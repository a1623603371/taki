server:
  port: 9001
  servlet:
    context-path: taki-mall-order


spring:
  application:
    name: taki-mall-order
  # *****************数据库***********************
  datasource:
    # 数据库连接池
    type: com.alibaba.druid.pool.DruidDataSource
    #数据库连接地址
    url: jdbc:mysql://192.168.33.11:3306/taki-mall?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull
    username: root
    password: Pzk2020@
    # 数据库驱动
    driver-class-name: com.mysql.cj.jdbc.Driver
    druid:
      #初始的建立的连接次数
      initial-size: 50
      # 最小连接池数量
      min-idle: 50
      # 最大的连接池数量
      max-active: 500
      # 最大的 连接等待时间
      max-wait: 6000
      # 申请连接时执行ValidationQuery 检测连接是否有效，建议关闭，开启会影响性能
      test-on-borrow: false
      # 归还连接时执行 ValidationQuery 检测连接是否有效 建议关闭，开启会影响性能
      test-on-return: false
      # 建议开启，不影响性能，并保证安全，申请连接时检测，如果空闲时间大于 timeBetweenEviction-runs-millis 的时间，执行 ValidationQuery 检测连接是否有效
      test-while-idle: true
      #1.Destory线程会检测连接间隔时间 2.testWhileIdle 的判断依据
      time-between-eviction-runs-millis: 60000
      # 配置一个连接，在池中最小生存时间 ms
      min-evictable-idle-time-millis: 30000
      #检测 连接是否有效 SQL 语句，SQL 必须是查询语句 如果是null 会影响testWhileIdle、testOnBorrow、testOnReturn失效，如果底层代码use-ping-method是true，默认使用ping
      validation-query: SELECT 1 FROM DUAL
      # 检测SQL 超时时间
      validation-query-timeout: 500
      #缓存preparedStatements ，就是 PS Cache ，PS Cache 对支持游标的数据库性能提升巨大，比如 ORACLE ,MYSQL 不建议开启
      pool-prepared-statements: false
      #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: -1

      # max-evictable-idle-time-millis:
      #属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      #监控统计用的 stat,日志用的 log4j， 防御SQL注入的是log4j
      filter:
        stat:
          log-slow-sql: true
      # 通过 connectProperties属性来打开mergeSql功能；记录慢SQL
      connectionProperties: druid.stat.mergeSql=ture;druid.stat.slowSqlMillis=5000

      #类型是 List<com.alibaba.druid.Filter> 如果同时也配置了 filter  他们是组合关系 ，不是替代关系
      # proxy-filters:
      #当数据库抛出不可恢复的异常直接抛弃连接
      # exception-sorter:
      # 物理连接初始化的时候执行的SQL
      # connection-init-sqls:
      # 数据库类型
      # db-type: mysql
      #webStatFilter 监控配置
      web-stat-filter:
        enabled: true
        #添加过滤规则：那些访问拦截统计
        url-pattern: /*
        #忽略过滤格式 那些不拦截，不统计
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'

      # StatViewServlet 配置 （Druid 监控后台的Servlet 映射配置，因为SpringBoot 项目没有 web.xml 所在这里使用配置文件设置）
      stat-view-servlet:
        enabled: true
        #配置Servlet的访问路径：访问为/druid/** 时，跳转StatViewServlet，会自动跳转到Durid 监控后台
        url-pattern: /druid/*
        # 是否能够重置数据
        reset-enable: false
        login-username: admin
        login-password: password
        # 白名单
        allow: 127.0.0.1
        # 黑名单
        deny: 192.168.33.11

#************ nacos 配置 *****************
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8084
    sentinel:
      transport:
        dashboard: 127.0.0.1:8080
        port: 18005
      # 使用nacos做持久化
      datasource:
        # 微服务流控配置
        flow:
          nacos:
            server-addr: localhost:8848
            namespace: sentinel
            group-id: SENTINEL_GROUP
            data-id: ${spring.application.name}-flow-rules.json
            data-type: json
            rule-type: flow
        # 熔断降级配置
        degrade:
          nacos:
            server-addr: localhost:8848
            namespace: sentinel
            group-id: SENTINEL_GROUP
            data-id: ${spring.application.name}-degrade-rules.json
            data-type: json
            rule-type: degrade
        # 热点规则
        param-flow:
          nacos:
            server-addr: localhost:8848
            namespace: sentinel
            group-id: SENTINEL_GROUP
            data-id: ${spring.application.name}-param-flow-rules.json
            data-type: json
            rule-type: param-flow
        # 系统规则
        system:
          nacos:
            server-addr: localhost:8848
            namespace: sentinel
            group-id: SENTINEL_GROUP
            data-id: ${spring.application.name}-system-rules.json
            data-type: json
            rule-type: system
        # 授权规则
        authority:
          nacos:
            server-addr: localhost:8848
            namespace: sentinel
            group-id: SENTINEL_GROUP
            data-id: ${spring.application.name}-authority-rules.json
            data-type: json
            rule-type: authority
#***************Redis 配置**********************
  redis:
    host: 192.168.33.11
    port: 6379
    password: 123456
    timeout: 3000


#********Mybatis-plus**********

mybatis-plus:
  configuration:
    # 日志打印
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 驼峰命名
    map-underscore-to-camel-case: true
  mapper-locations: classpath:mapper/*.xml


#********************dubbo 配置**************************
dubbo:
  scan:
    base-packages: com.taki.order.api
  registry:
    address: spring-cloud://localhost
  protocol:
    name: dubbo
    port: 28085
  consumer:
    check: false
  provider:
    threads: 800
    actives: 200
  cloud:
    subscribed-services:


#***************rocketMq 配置********************
rocketmq:
  name-server: localhost:8091


#**************SEATA 配置 **********************

seata:
  tx-service-group: taki-eshop-order-group # 事务组
  service:
    grouplist:
      taki-eshop-seata: 127.0.0.1:8091
    vgroup-mapping:
      taki-eshop-order-group: taki-eshop-seata
  application-id: seata-server #Seata应用的名称
  enable-auto-data-source-proxy: false
  config:
    type: nacos #基于nacos 实现分布式事务管理
    nacos:
      server-addr: 172.0.0.1:8842 #Nacos服务地址
      namespace: seate  # Seata的NameSpace ID
      group: SEATE_GROUP
      username: nacos
      password: nacos

  registry:
    type: nacos
    nacos:
      server-addr: 172.0.0.1:8842 #Nacos服务地址
      namespace: seate  # Seata的NameSpace ID
      group:  SEATE_GROUP
      username: nacos
      password: nacos
      cluster: default
      application: seata-server
#***************XXL-JOB 配置********************
xxl:
  job:
    admin:
      addresses: http://localhost:8080/xxl-job-admin
    executor:
      appname: ruyuan-order-service
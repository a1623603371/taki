<?xml version="1.0" encoding="UTF-8"?>
<!--
 scan: 当此属性设置为true时,配置文件如果发生改变,将会重新加载，默认为true
 scanPeriod： 设置监测配置文件是否有修改的时间间隔
 ，如果没有给出时间单位，默认是毫秒当scan为 true ，此属性生效默认的时间间隔为1分钟
 debug: 当此属性设置为true 时，将打印出 logback 内部日志信息，实时查看lgback运行状态,默认设置为false
 -->

<configuration  scan="false" scanPeriod = "60 seconds" debug ="false">
    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="/app/log"/>
    <!-- 定义日志名称 -->
    <property name="appName" value="taki-mall"/>
    <!-- -->
    <appender name = "stdout" class ="ch.qos.logback.core.ConsoleAppender" >
        <!--
  #日志输出格式
  # %d 日期时间
  # %thread 表示线程
  # %-5level: 级别从左显示5个字符宽度
  # %logger{50} 表示logger 名字最长 50 个字符，否则按照句点分割
  # %msg: 日志信息
  #%n 换行
  #
  # %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %5level %logger{50} - %msg%n
         -->
        <layout  class ="ch.qos.logback.classic.PatternLayout">
            <springProfile name="dev">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}----> [%thread] ---> %5level %logger{50} - %msg%n</pattern>
            </springProfile>
            <springProfile name="!dev">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}=======> [%thread] =====> %5level %logger{50} - %msg%n</pattern>
            </springProfile>
        </layout>
    </appender>
    <!--滚动记录文件，先将日志记录到指定文件,当符合某个条件时，将日志记录到其他文件 -->
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称-->
        <flie>${LOG_HOME}/${appName}.log</flie>
        <rollingPolicy class = "ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!--
         当发生滚动时，决定RollingFileAppender 的行为，涉及文件移动和重命名
         TimeBasedRollingPolicy:最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。-->
        <filenamePattern>%{LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</filenamePattern>
        <!--可选节点，控制保留的归档文件的最大数量，超过数量就删除旧文件。假设设置每天滚动，且maxHistory是 365，
         则保存365天的文件，删除之前的旧文件，注意删除旧文件是那些为了归档而创建的目录也会被删除-->
        <MaxHistory>365</MaxHistory>
        <!--当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
        注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置 timeBasedFileNamingAndTriggeringPolicy -->
        <timeBasedFileNaminAndTriggeringPolicy class ="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <maxFileSize>100MB</maxFileSize>
        </timeBasedFileNaminAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式：-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SS} [%Thread] - [%-5level] [%logger{50} : %line] - %msg%n</pattern>
        </layout>
    </appender>
    <!-- logger 主要用于存放日志对象，也可以定义日志类型，级别
    name：表示匹配的的logger类型前缀，也就是包的前半部分
    level：要记录的日志级别，包括 TRACE < DEBUG < INFO  < WARN < ERROR
    additivity:作用用于children-logger是否使用 rootLogger配置的appender进行输出，
    false:表示当前logger的appender-ref 和 rootLogger的appender-ref都有效
    -->
    <!-- hibernate logger-->
    <logger name ="com.taki" level ="debug"/>

    <logger name="org.springframework" level="debug" additivity="false"/>


    <!-- root 与 logger 是父子关系，没有特别的定义则默认为root 任何一个类只会和一个logger 对应，
    要么是定义的logger，要么是root 判断的关键在于找到这个logger，然后判断这个logger的appender和level-->

    <root level="info">
        <appender-ref ref="stdout"/>
        <appender-ref ref="appLogAppender"/>
    </root>


</configuration>
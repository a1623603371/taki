<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

    <property name="LOG_HOME" value="D:\logs"/>
    <property name="LOG_PREFIX" value="taki-mall_user"/>
    <!--
    %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
    %r:输出自应用启动到输出该日志讯息所耗费的毫秒数
    %t:输出产生该日志事件的线程名
    %f:输出日志讯息所属的类别的类别名
    %c:输出日志讯息所属的类的全名
    %d:输出日志时间点的日期或时间，指定格式的方式： %d{yyyy-MM-dd HH:mm:ss}
    %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。
    %m:输出代码中指定的讯息，如log(message)中的message
    %n:输出一个换行符号
    -->
    <!--
    Appender: 设置日志信息的去向,常用的有以下几个
    ch.qos.logback.core.ConsoleAppender (控制台)
    ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)
    ch.qos.logback.core.FileAppender (文件，不推荐使用)
    -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--&lt;!&ndash; 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 &ndash;&gt;-->
        <File>${LOG_HOME}/${LOG_PREFIX}-info.log</File>
        <!--<encoder>：对记录事件进行格式化。-->
        <encoder>
            <!--格式化输出：%d表示日期,后面跟时间格式，默认%data{yyyy-MM-dd}，%thread表示线程名， %msg：日志消息，%n是换行符-->
            <pattern>%date [%level] [%thread] %logger{60} [%file : %line] %msg%n</pattern>
        </encoder>
        <!--RollingFileAppender:-->
        <!--滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。-->
        <!--<rollingPolicy>:当发生滚动时，决定RollingFileAppender 的行为，涉及文件移动和重命名。-->
        <!--TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--<fileNamePattern>:
            必要节点，包含文件名及“%d”转换符， “%d”可以包含一个 java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。
            如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender 的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
            如果没设置file，活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。-->
            <!--<fileNamePattern>${LOG_HOME}/daily/${LOG_FILE}.%d{yyyy-MM-dd}.gz</fileNamePattern>-->
            <!--压缩文件的保存路径以及保存格式，这里必须将文件压缩，.%i 必须有。如果按上面的配置会报错-->
            <fileNamePattern>${LOG_HOME}/daily/${LOG_FILE}_%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--保存文件的大小，超过该大小自动创建新文件。旧文件压缩保存到daily目录下-->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--&lt;!&ndash; 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，如果是6，则只保存最近6天的文件，删除之前的旧文件 包括压缩文件 &ndash;&gt;-->
            <!--&lt;!&ndash; 每产生一个日志文件，该日志文件的保存期限天数 &ndash;&gt;-->
            <maxHistory>1</maxHistory>
        </rollingPolicy>
    </appender>
    <!--root是默认的logger 这里设定输出级别是info-->
    <root level="INFO">
        <!--定义了两个appender，日志会通过往这两个appender里面写-->
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>
</configuration>













<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--&lt;!&ndash;-->
<!-- scan: 当此属性设置为true时,配置文件如果发生改变,将会重新加载，默认为true-->
<!-- scanPeriod： 设置监测配置文件是否有修改的时间间隔-->
<!-- ，如果没有给出时间单位，默认是毫秒当scan为 true ，此属性生效默认的时间间隔为1分钟-->
<!-- debug: 当此属性设置为true 时，将打印出 logback 内部日志信息，实时查看lgback运行状态,默认设置为false-->
<!-- &ndash;&gt;-->

<!--<configuration  scan="false" scanPeriod = "60 seconds" debug ="false">-->
<!--    &lt;!&ndash; 定义日志的根目录 &ndash;&gt;-->
<!--    <property name="LOG_HOME" value="/app/log"/>-->
<!--    &lt;!&ndash; 定义日志名称 &ndash;&gt;-->
<!--    <property name="appName" value="taki-mall"/>-->
<!--    &lt;!&ndash; &ndash;&gt;-->
<!--    <appender name = "stdout" class ="ch.qos.logback.core.ConsoleAppender" >-->
<!--        &lt;!&ndash;-->
<!--  #日志输出格式-->
<!--  # %d 日期时间-->
<!--  # %thread 表示线程-->
<!--  # %-5level: 级别从左显示5个字符宽度-->
<!--  # %logger{50} 表示logger 名字最长 50 个字符，否则按照句点分割-->
<!--  # %msg: 日志信息-->
<!--  #%n 换行-->
<!--  #-->
<!--  # %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %5level %logger{50} - %msg%n-->
<!--         &ndash;&gt;-->
<!--        <layout  class ="ch.qos.logback.classic.PatternLayout">-->
<!--            <springProfile name="dev">-->
<!--                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}&#45;&#45;&ndash;&gt; [%thread] -&ndash;&gt; %5level %logger{50} - %msg%n</pattern>-->
<!--            </springProfile>-->
<!--            <springProfile name="!dev">-->
<!--                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}=======> [%thread] =====> %5level %logger{50} - %msg%n</pattern>-->
<!--            </springProfile>-->
<!--        </layout>-->
<!--    </appender>-->




<!--    &lt;!&ndash;滚动记录文件，先将日志记录到指定文件,当符合某个条件时，将日志记录到其他文件 &ndash;&gt;-->
<!--    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; 指定日志文件的名称&ndash;&gt;-->
<!--        <flie>${LOG_HOME}/${appName}.log</flie>-->
<!--        <rollingPolicy class = "ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--        &lt;!&ndash;-->
<!--         当发生滚动时，决定RollingFileAppender 的行为，涉及文件移动和重命名-->
<!--         TimeBasedRollingPolicy:最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。&ndash;&gt;-->
<!--        <filenamePattern>%{LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</filenamePattern>-->
<!--        &lt;!&ndash;可选节点，控制保留的归档文件的最大数量，超过数量就删除旧文件。假设设置每天滚动，且maxHistory是 365，-->
<!--         则保存365天的文件，删除之前的旧文件，注意删除旧文件是那些为了归档而创建的目录也会被删除&ndash;&gt;-->
<!--        <MaxHistory>365</MaxHistory>-->
<!--        &lt;!&ndash;当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动-->
<!--        注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置 timeBasedFileNamingAndTriggeringPolicy &ndash;&gt;-->
<!--        <timeBasedFileNaminAndTriggeringPolicy class ="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--            <maxFileSize>100MB</maxFileSize>-->
<!--        </timeBasedFileNaminAndTriggeringPolicy>-->
<!--        </rollingPolicy>-->
<!--        &lt;!&ndash; 日志输出格式：&ndash;&gt;-->
<!--        <layout class="ch.qos.logback.classic.PatternLayout">-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SS} [%Thread] - [%-5level] [%logger{50} : %line] - %msg%n</pattern>-->
<!--        </layout>-->
<!--    </appender>-->
<!--    &lt;!&ndash; logger 主要用于存放日志对象，也可以定义日志类型，级别-->
<!--    name：表示匹配的的logger类型前缀，也就是包的前半部分-->
<!--    level：要记录的日志级别，包括 TRACE < DEBUG < INFO  < WARN < ERROR-->
<!--    additivity:作用用于children-logger是否使用 rootLogger配置的appender进行输出，-->
<!--    false:表示当前logger的appender-ref 和 rootLogger的appender-ref都有效-->
<!--    &ndash;&gt;-->
<!--    &lt;!&ndash; hibernate logger&ndash;&gt;-->
<!--    <logger name ="com.taki" level ="debug"/>-->

<!--    <logger name="org.springframework" level="debug" additivity="false"/>-->


<!--    &lt;!&ndash; root 与 logger 是父子关系，没有特别的定义则默认为root 任何一个类只会和一个logger 对应，-->
<!--    要么是定义的logger，要么是root 判断的关键在于找到这个logger，然后判断这个logger的appender和level&ndash;&gt;-->

<!--    <root level="info">-->
<!--        <appender-ref ref="stdout"/>-->
<!--        <appender-ref ref="appLogAppender"/>-->
<!--    </root>-->




<!--</configuration>-->